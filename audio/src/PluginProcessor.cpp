/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "HostParam.h"

// UI header, should be hidden behind a factory
#include <PluginEditor.h>

#include "ssr code/configuration.h"

//==============================================================================
PluginAudioProcessor::PluginAudioProcessor()
{
    // write default_hrir binary into temporary file
    tempFile = new TemporaryFile(".wav");
    ScopedPointer<FileOutputStream> out = tempFile->getFile().createOutputStream();
    out->write(BinaryData::default_hrirs_wav, BinaryData::default_hrirs_wavSize);

    // save path of randomly named tempFile
    hrirFilePath = tempFile->getFile().getFullPathName();

    // add automation params for host
    addParameter(new HostParam<Param>(sourceX));
    addParameter(new HostParam<Param>(sourceY));
    addParameter(new HostParam<Param>(sourceOrientation));
    addParameter(new HostParam<Param>(sourceGain));
    addParameter(new HostParam<ParamStepped<eOnOffState>>(sourceMute));
    addParameter(new HostParam<ParamStepped<eSourceType>>(isSourceTypePlane));

    addParameter(new HostParam<Param>(referenceX));
    addParameter(new HostParam<Param>(referenceY));
    addParameter(new HostParam<Param>(referenceOrientation));
}

PluginAudioProcessor::~PluginAudioProcessor()
{
    tempFile->deleteTemporaryFile();
    tempFile = nullptr;
}

//==============================================================================
const String PluginAudioProcessor::getName() const
{
#ifdef JucePlugin_Name
    return JucePlugin_Name;
#else
    // standalone
    return "plugin";
#endif
}

const String PluginAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PluginAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PluginAudioProcessor::isInputChannelStereoPair (int index) const
{
    ignoreUnused(index);
    return true;
}

bool PluginAudioProcessor::isOutputChannelStereoPair (int index) const
{
    ignoreUnused(index);
    return true;
}

bool PluginAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PluginAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PluginAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PluginAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PluginAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PluginAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PluginAudioProcessor::setCurrentProgram (int index)
{
    ignoreUnused(index);
}

const String PluginAudioProcessor::getProgramName (int index)
{
    ignoreUnused(index);
    return String();
}

void PluginAudioProcessor::changeProgramName (int index, const String& newName)
{
    ignoreUnused(index,newName);
}

namespace {
    char* ssr_argv[] = { "ssr_juce", "--binaural", "--no-ip-server", "--no-gui", "--no-tracker", "--verbose" };
    int ssr_argc = sizeof(ssr_argv)/sizeof(ssr_argv[0]);
}

//==============================================================================
void PluginAudioProcessor::prepareToPlay (double sRate, int samplesPerBlock)
{
    auto conf = ssr::configuration(ssr_argc, ssr_argv);
    conf.renderer_params.set<int>("sample_rate", static_cast<int>(sRate));
    conf.renderer_params.set<int>("block_size", samplesPerBlock);
    conf.renderer_params.set<int>("in_channels", getNumInputChannels());
    conf.renderer_params.set<int>("out_channels", getNumOutputChannels());

    // set hrir_file source to temporary file
    conf.renderer_params.set("hrir_size", 0); // "0" means use all that are there
    conf.renderer_params.set("hrir_file", hrirFilePath);

    renderer.reset(new ssr::BinauralRenderer(conf.renderer_params));
    renderer->load_reproduction_setup();

    /// \todo add source for each input channel?
    // add input source
    apf::parameter_map sourceParam;
    renderer->add_source(sourceParam);
}

void PluginAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PluginAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    ignoreUnused(midiMessages);

    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // set ssr source params
    ssr::RendererBase<ssr::BinauralRenderer>::Source *source = renderer->get_source(1);
    source->gain.setRT(sourceGain.get());
    source->mute.setRT(sourceMute.getStep() == eOnOffState::eOn);
    if (isSourceTypePlane.getStep() == eSourceType::ePlane)
    {
        source->model.setRT(Source::model_t::plane);
        source->orientation.setRT(Orientation(sourceOrientation.get()));
    }
    else
    {
        source->model.setRT(Source::model_t::point);
        source->position.setRT(Position(sourceX.get(), sourceY.get()));
    }

    // set ssr listener params
    renderer->state.reference_position.setRT(Position(referenceX.get(), referenceY.get()));
    renderer->state.reference_orientation.setRT(Orientation(referenceOrientation.get()));
    renderer->state.amplitude_reference_distance.setRT(amplitudeReferenceDistance.get());

    /// \todo how to handle mono input from host correctly?
    // choose between left or right channel for stereo input
    int channelIndex = static_cast<int>(inputChannel.getStep());

    // get source input level
    sourceLevel.set(buffer.getRMSLevel(channelIndex, 0, buffer.getNumSamples()));

    // call internal ssr process function of renderer
    renderer->audio_callback(getBlockSize()
        , buffer.getArrayOfWritePointers() + channelIndex // NOTE: write ~ read pointer (same address) but read is const
        , buffer.getArrayOfWritePointers());

    // get ssr output level
    outputLevelLeft.set(buffer.getRMSLevel(0, 0, buffer.getNumSamples()));
    outputLevelRight.set(buffer.getRMSLevel(1, 0, buffer.getNumSamples()));
}

//==============================================================================
bool PluginAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PluginAudioProcessor::createEditor()
{
    return new PluginAudioProcessorEditor (*this);
}

//==============================================================================
void PluginAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    ignoreUnused(destData);
}

void PluginAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    ignoreUnused(data, sizeInBytes);
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PluginAudioProcessor();
}
