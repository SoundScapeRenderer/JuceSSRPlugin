/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "JuceHeader.h"
#include "PluginParams.h"

#include "apf/pointer_policy.h"
#include "apf/default_thread_policy.h"
#include "ssr src/binauralrenderer.h"

//==============================================================================
/**
 * Common JUCE PluginProcessor. Derived from PluginParams for communication with UI.
 * The SSR is incorporated in this class.
 *
 * NOTE: For future addings of HRIR or prefilter files (for WFS) and further SSR renderers it is
 * recommended to implement a function in which you can change renderers and files.
 * Don't forget to use suspendProcessing() because the configurations can be time consuming
 * and meanwhile the processBlock() could try to use a not available renderer callback!
 * That function should be public to be accessible from the ConfigPanel.
 */
class PluginAudioProcessor : public AudioProcessor, public PluginParams
{
public:
    PluginAudioProcessor();
    ~PluginAudioProcessor();

    //==============================================================================

    /// plugin audio processing callbacks
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock(AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================

    /// audio processor editor stuff
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================

    /// plugin information about name, routing and midi
    const String getName() const override;

    const String getInputChannelName(int channelIndex) const override;
    const String getOutputChannelName(int channelIndex) const override;
    bool isInputChannelStereoPair(int index) const override;
    bool isOutputChannelStereoPair(int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================

    /// plugin programm getter and setter
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram(int index) override;
    const String getProgramName(int index) override;
    void changeProgramName(int index, const String& newName) override;

    //==============================================================================

    /// host serializiation functions to read and write patches
    void getStateInformation(MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    //==============================================================================

private:
    std::unique_ptr<ssr::BinauralRenderer> renderer; //!< SSR renderer
    int sourceID = 0; //!< ID of created SSR source for accessing parameters

    ScopedPointer<TemporaryFile> tempHrirFile; //!< temporary hrir file to be created from memory
    bool setupSuccessful = false; //!< only create and use SSR renderer if loading hrir file was successful

    /**
     * Create a temporary HRIR file in the default temporary file location. Resample the
     * original hrirs_fabian.wav only if current sample rate is not {44.1, 48.0, 96.0}kHz,
     * otherwise use one of the (pre-resampled) HRIR files from memory.
     * The original HRIR file has a samplerate of 44.1kHz, the others were resampled using SoX
     * (http://sox.sourceforge.net/) since it sounds better than the JUCE LagrangeInterpolator.
     * @param sRate currently used sample rate, resample HRIR file if necessary
     * @return absolute path name of created (resampled) temporary HRIR file
     */
    String createTempHRIRFile(double sRate);

    /**
     * Update host information by updating information of host's audio playhead.
     * See positionInfo in PluginParams to get access to bpm or transport state of the host.
     */
    void updateHostInfo();
    
#define PERFORMANCE_TEST_JUCESSR 0
#if PERFORMANCE_TEST_JUCESSR == 1
    PerformanceCounter pcProcessing; /// whole processing
    PerformanceCounter pcRendererSetup; /// renderer setup
    PerformanceCounter pcRendering; /// rendering
#endif

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(PluginAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
